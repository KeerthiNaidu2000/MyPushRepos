#include <stdio.h>
#include <stdlib.h>

int a[100], n, key;

int lsearch(int a[], int n, int key) {
    int i = -1;
    while (i < n) {
        if (a[++i] == key)
            return i;
    }
    return -1;
}

int binsearch(int a[], int n, int key) {
    int first, last, mid;
    first = 0;
    last = n - 1;
    while (first <= last) {
        mid = (first + last) / 2;
        if (key == a[mid])
            return mid;
        else if (key < a[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}

void acceptInput() {
    int i;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &a[i]);
    }
    printf("Enter key: ");
    scanf("%d", &key);
}

void main() {
    int ch, flag;
    while (1) {
        printf("\n********* Search *********\n");
        printf("1. Linear Search\n");
        printf("2. Binary Search\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                acceptInput();
                flag = lsearch(a, n, key);
                if (flag == -1) {
                    printf("\nSearch is unsuccessful\n");
                } else {
                    printf("\nElement %d found at position: %d\n", key, flag + 1);
                }
                break;

            case 2:
                printf("\nEnter elements in ascending order\n");
                acceptInput();
                flag = binsearch(a, n, key);
                if (flag == -1) {
                    printf("\n%d not found in array\n", key);
                } else {
                    printf("\nElement %d found at position: %d\n", key, flag + 1);
                }
                break;

            case 3:
                exit(0);

            default:
                printf("\nInvalid choice\n");
        }
    }
}
